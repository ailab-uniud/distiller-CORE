/*
 * 	Copyright (C) 2015 Artificial Intelligence
 * 	Laboratory @ University of Udine.
 *
 * 	Licensed under the Apache License, Version 2.0 (the "License");
 * 	you may not use this file except in compliance with the License.
 * 	You may obtain a copy of the License at
 *
 * 	     http://www.apache.org/licenses/LICENSE-2.0
 *
 * 	Unless required by applicable law or agreed to in writing, software
 * 	distributed under the License is distributed on an "AS IS" BASIS,
 * 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 	See the License for the specific language governing permissions and
 * 	limitations under the License.
 */
package it.uniud.ailab.dcore.annotation.annotations;

import it.uniud.ailab.dcore.annotation.Annotation;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This annotation represents an inferred concept. For example, having a document 
 * that talks about Ferraris, the distiller may infer the concept "sports cars".
 * 
 * Each inferred concept should have a score, to allow ranking of the inferred
 * concepts by importance.
 *
 * @author Marco Basaldella
 */
public class InferenceAnnotation 
        extends Annotation
        implements ScoredAnnotation {
    
    /**
     * Instantiates the annotation.
     * 
     * @param annotator the annotator that generated the annotation.
     * @param concept the annotated concept.
     * @param score the score associated to the concept by the annotator.
     * @param uri the URI associated to the concept
     */
    public InferenceAnnotation(String annotator,String concept,
            double score,URI uri) {
        super(annotator);
        
        super.addString(concept);
        super.addNumber(score);
        super.addString(uri.toString());
    }
    
    /**
     * Gets the concept inferred by the annotator.
     * 
     * @return the concept.
     */
    public String getConcept() {
        return super.getStringAt(0);
    }

    /**
     * Gets the score associated to the concept inferred.
     * 
     * @return the score generated by the annotator.
     */
    @Override
    public double getScore() {
        return super.getNumberAt(1).doubleValue();
    }
    
    /**
     * Gers the URI associated with the concept.
     * 
     * @return the URI associated with the concept.
     */
    public URI getUri() {
        
        URI uri = null;
        
        try {
            uri = new URI(super.getStringAt(2));
        } catch (URISyntaxException ex) {
            
            // The catch is mandatory, but it's very unlikely that
            // this may happen
            
            Logger.getLogger(InferenceAnnotation.class.getName())
                    .log(Level.SEVERE, 
                            "Absurdity: URI converted to String cannot be converted back to URI",
                            ex);
        }
        
        return uri;
    }
}
