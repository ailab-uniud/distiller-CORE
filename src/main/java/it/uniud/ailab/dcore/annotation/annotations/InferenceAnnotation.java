/*
 * Copyright (C) 2015 Artificial Intelligence
 * Laboratory @ University of Udine.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package it.uniud.ailab.dcore.annotation.annotations;

import it.uniud.ailab.dcore.annotation.Annotation;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This annotation represents an inferred concept. For example, having a document 
 * that talks about Ferraris, the distiller may infer the concept "sports cars".
 * 
 * Each inferred concept should have a score, to allow ranking of the inferred
 * concepts by importance.
 *
 * @author Marco Basaldella
 */
public class InferenceAnnotation 
        extends Annotation
        implements ScoredAnnotation {
    
    /**
     * Instantiates the annotation.
     * 
     * @param annotator the annotator that generated the annotation.
     * @param concept the annotated concept.
     * @param score the score associated to the concept by the annotator.
     * @param uri the URI associated to the concept
     */
    public InferenceAnnotation(String annotator,String concept,
            double score,URI uri) {
        super(annotator);
        
        super.addString(concept);
        super.addNumber(score);
        super.addString(uri.toString());
    }
    
    /**
     * Gets the concept inferred by the annotator.
     * 
     * @return the concept.
     */
    public String getConcept() {
        return super.getStringAt(0);
    }

    /**
     * Gets the score associated to the concept inferred.
     * 
     * @return the score generated by the annotator.
     */
    @Override
    public double getScore() {
        return super.getNumberAt(1).doubleValue();
    }
    
    /**
     * Gers the URI associated with the concept.
     * 
     * @return the URI associated with the concept.
     */
    public URI getUri() {
        
        URI uri = null;
        
        try {
            uri = new URI(super.getStringAt(2));
        } catch (URISyntaxException ex) {
            
            // The catch is mandatory, but it's very unlikely that
            // this may happen
            
            Logger.getLogger(InferenceAnnotation.class.getName())
                    .log(Level.SEVERE, 
                            "Absurdity: URI converted to String cannot be converted back to URI",
                            ex);
        }
        
        return uri;
    }
}
